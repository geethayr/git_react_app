{"version":3,"sources":["upcs.js","SearchBox.js","Card.js","CardList.js","App.js","serviceWorker.js","index.js"],"names":["upcs","id","productname","upc","SearchBox","searchChange","className","type","placeholder","onChange","Card","alt","src","CardList","map","user","i","key","App","onSearchChange","event","setState","searchfield","target","value","console","log","state","filteredUpc","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wOAAaA,EAAO,CAChB,CACIC,GAAI,EACJC,YAAa,WACbC,IAAK,gBAET,CACIF,GAAI,EACJC,YAAa,eACbC,IAAK,gBAET,CACIF,GAAI,EACJC,YAAa,UACbC,IAAK,gBAET,CACIF,GAAI,EACJC,YAAa,YACbC,IAAK,gBAET,CACIF,GAAI,EACJC,YAAa,cACbC,IAAK,gBAET,CACIF,GAAI,EACJC,YAAa,YACbC,IAAK,gBAET,CACIF,GAAI,EACJC,YAAa,eACbC,IAAK,gBAET,CACIF,GAAI,EACJC,YAAa,cACbC,IAAK,gBAET,CACIF,GAAI,EACJC,YAAa,UACbC,IAAK,gBAET,CACIF,GAAI,GACJC,YAAa,WACbC,IAAK,iBClCEC,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKC,UAAU,QACX,2BACIA,UAAU,mCACVC,KAAK,SACLC,YAAY,YACZC,SAAUJ,MCOXK,EAdF,SAAC,GAA4B,EAA3BT,GAA4B,IAAxBC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,IAE5B,OACI,yBAAKG,UAAU,yDACX,yBAAKK,IAAI,2BACJC,IAAG,uDAAkDT,EAAlD,iKACR,6BACI,4BAAKD,GACL,2BAAIC,MCcLU,EApBE,SAAC,GAAY,IAAXb,EAAU,EAAVA,KAEf,OACI,6BAEQA,EAAKc,KAAI,SAACC,EAAMC,GACZ,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLf,GAAID,EAAKgB,GAAGf,GACZC,YAAaF,EAAKgB,GAAGd,YACrBC,IAAKH,EAAKgB,GAAGb,WCsB1Be,G,wDA7BX,aAAe,IAAD,8BACV,gBAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,QACzCC,QAAQC,IAAI,iBAAkBN,EAAMG,OAAOC,QAR3C,EAAKG,MAAQ,CACT3B,KAAMA,EACNsB,YAAa,IAJP,E,qDAcJ,IAAD,OACCM,EAAcC,KAAKF,MAAM3B,KAAK8B,QAAO,SAAA9B,GACvC,OAAOA,EAAKG,IAAI4B,cAAcC,SAAS,EAAKL,MAAML,YAAYS,kBAGlE,OACI,yBAAKzB,UAAU,MACX,wBAAIA,UAAU,MAAd,qBACA,kBAAC,EAAD,CAAWD,aAAcwB,KAAKV,iBAC9B,kBAAC,EAAD,CAAUnB,KAAM4B,S,GAxBdK,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACL,6BACI,kBAAC,EAAD,OAENC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.3d89d224.chunk.js","sourcesContent":["export const upcs = [\n    {\n        id: 1,\n        productname: 'POTATOES',\n        upc: '033383536101',\n    },\n    {\n        id: 2,\n        productname: 'TYS CHK THIN',\n        upc: '225573000008',\n    },\n    {\n        id: 3,\n        productname: 'JD SKLT',\n        upc: '077900491603',\n    },\n    {\n        id: 4,\n        productname: 'SALAD KIT',\n        upc: '681131007047',\n    },\n    {\n        id: 5,\n        productname: 'MICRO BACON',\n        upc: '037600250627',\n    },\n    {\n        id: 6,\n        productname: 'HAM STEAK',\n        upc: '201892000004',\n    },\n    {\n        id: 7,\n        productname: 'ORG SNK TRAY',\n        upc: '813905001153',\n    },\n    {\n        id: 8,\n        productname: '3Z JT CK EG',\n        upc: '021000067473',\n    },\n    {\n        id: 9,\n        productname: ' CHEESE',\n        upc: '041757011017',\n    },\n    {\n        id: 10,\n        productname: 'FAGE YOG',\n        upc: '689544083405',\n    }\n];\n","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className='pa2 '>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='searchupc'\n                onChange={searchChange}\n        />\n        </div>\n    );\n}\n\nexport default SearchBox","import React from 'react';\n\nconst Card = ({id, productname, upc }) => { //destructed \n    //const {id, productname, upc } = props\n    return (\n        <div className='tc bg-lightest-blue dib br3 pa3 ma2 grow bw2 shadow-2'>\n            <img alt='Barcode Generator TEC-IT'\n                 src={`https://barcode.tec-it.com/barcode.ashx?data=${upc}&code=UPCA&multiplebarcodes=false&translate-esc=false&unit=Fit&dpi=96&imagetype=Gif&rotation=0&color=%23000000&bgcolor=%23ffffff&codepage=&qunit=Mm&quiet=0`}/>\n            <div>\n                <h2>{productname}</h2>\n                <p>{upc}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\n\nimport Card from './Card'\n\nconst CardList = ({upcs}) => { //{upcs} = const {upcs} = props.upcs\n\n    return (\n        <div>\n            {\n                upcs.map((user, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            id={upcs[i].id}\n                            productname={upcs[i].productname}\n                            upc={upcs[i].upc}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React, {Component} from 'react';\nimport {upcs} from \"./upcs\";\nimport SearchBox from './SearchBox';\nimport CardList from './CardList';\nimport './App.css'\n\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            upcs: upcs,\n            searchfield: ''\n        }\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n        console.log(\"[Event in App]\", event.target.value);\n\n\n    }\n    render() {\n        const filteredUpc = this.state.upcs.filter(upcs => {\n            return upcs.upc.toLowerCase().includes(this.state.searchfield.toLowerCase());\n            console.log(\"[Filtered UPCS in App]\", filteredUpc);\n        })\n        return(\n            <div className='tc'>\n                <h1 className='f2'>BarCode Generator</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <CardList upcs={filteredUpc}/>\n                </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n    <div>\n        <App />\n    </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}